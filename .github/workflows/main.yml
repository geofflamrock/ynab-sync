name: Build, test and publish packages
on:
  push:
    branches:
      - main

  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: "${{ matrix.os}}: Build, test and publish cli"

    strategy:
      matrix:
        node-version: ["16"]
        os: ["Linux", "MacOS", "Windows"]
        include:
          - node-version: 16
            os: Linux
            platform: ubuntu-latest
            target: node16-linux-x64
            artifact-name: linux.x64
            binary-name: ynab-sync
            asset-name: ynab-sync-linux-x64
          - node-version: 16
            os: MacOS
            platform: macos-latest
            target: node16-macos-x64
            artifact-name: macos.x64
            binary-name: ynab-sync
            asset-name: ynab-sync-macos-x64
          - node-version: 16
            os: Windows
            platform: windows-latest
            target: node16-win-x64
            artifact-name: win.x64
            binary-name: ynab-sync.exe
            asset-name: ynab-sync-win-x64.exe

    runs-on: ${{ matrix.platform }}

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache .pnpm-store
        uses: actions/cache@v1
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-node${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      - uses: pnpm/action-setup@v2.2.4
        with:
          version: 7.9.5
          run_install: true

      - name: Build
        run: pnpm run build

      - name: Test
        run: pnpm run test

      - name: Create CLI Package
        run: "pnpm run ci:pkg -- -- --target ${{ matrix.target }} --output ./bin/cli/${{ matrix.binary-name }}"

      - name: Publish CLI Package
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.artifact-name }}
          path: packages/cli/bin/cli/${{ matrix.binary-name }}

  publish_pre_release:
    name: Publish pre-release packages
    if: ${{ github.ref != 'refs/heads/main' || !startsWith(github.event.commits[0].message, 'Version Packages') }}
    runs-on: ubuntu-latest
    needs:
      - build

    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get cli version
        id: cli-version
        uses: Saionaro/extract-package-version@v1.1.1
        with:
          path: packages/cli

      - name: Get branch names
        id: branch_names
        uses: tj-actions/branch-names@v4.5

      - name: Replace invalid branch characters
        uses: mad9000/actions-find-and-replace-string@2
        id: extract_branch
        with:
          source: ${{steps.branch_names.outputs.current_branch}}
          find: "/"
          replace: "-"

      - id: version
        uses: paulhatch/semantic-version@v4.0.2
        with:
          format: "${{ steps.cli-version.outputs.version }}-${{ steps.extract_branch.outputs.value }}.${increment}"
          tag_prefix: "ynab-sync-cli@"

      - name: Create content directory
        run: mkdir ./content

      - uses: actions/download-artifact@v2
        with:
          path: ./content

      - name: Setup .NET Core SDK 6.0
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
          source-url: https://nuget.pkg.github.com/geofflamrock/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Restore
        run: dotnet restore ./nuget

      - name: Pack
        run: dotnet pack ./nuget -p:PackageVersion=${{ steps.version.outputs.version }} --no-build --no-restore --output ./dist --configuration Release

      - name: Push
        run: dotnet nuget push ./dist/*.nupkg --api-key ${{secrets.GITHUB_TOKEN}}
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

  publish:
    name: Publish release packages
    if: ${{ github.ref == 'refs/heads/main' && startsWith(github.event.commits[0].message, 'Version Packages') }}
    runs-on: ubuntu-latest
    needs:
      - build

    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v2.2.4
        with:
          version: 7.9.5
          run_install: true

      - name: Publish packages to npm
        uses: changesets/action@master
        with:
          publish: pnpm run ci:publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Get cli version
        id: cli-version
        uses: Saionaro/extract-package-version@v1.1.1
        with:
          path: packages/cli

      - name: Create content directory
        run: mkdir ./content

      - uses: actions/download-artifact@v2
        with:
          path: ./content

      - name: Setup .NET Core SDK 6.0
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
          source-url: https://nuget.pkg.github.com/geofflamrock/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Restore
        run: dotnet restore ./nuget

      - name: Pack
        run: dotnet pack ./nuget -p:PackageVersion=${{ steps.cli-version.outputs.version }} --no-build --no-restore --output ./dist --configuration Release

      - name: Push
        run: dotnet nuget push ./dist/*.nupkg --api-key ${{secrets.GITHUB_TOKEN}}
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

env:
  CI: true
